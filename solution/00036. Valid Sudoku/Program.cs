// See https://aka.ms/new-console-template for more information
var solution = new Solution();

//char[][] board =
//[['5', '3', '.', '.', '7', '.', '.', '.', '.']
//,
//    ['6', '.', '.', '1', '9', '5', '.', '.', '.']
//,
//    ['.', '9', '8', '.', '.', '.', '.', '6', '.']
//,
//    ['8', '.', '.', '.', '6', '.', '.', '.', '3']
//,
//    ['4', '.', '.', '8', '.', '3', '.', '.', '1']
//,
//    ['7', '.', '.', '.', '2', '.', '.', '.', '6']
//,
//    ['.', '6', '.', '.', '.', '.', '2', '8', '.']
//,
//    ['.', '.', '.', '4', '1', '9', '.', '.', '5']
//,
//    ['.', '.', '.', '.', '8', '.', '.', '7', '9']];


//var output = solution.IsValidSudoku(board);
//Console.WriteLine(output); // true

//char[][] board1 =
//[['8', '3', '.', '.', '7', '.', '.', '.', '.']
//,
//    ['6', '.', '.', '1', '9', '5', '.', '.', '.']
//,
//    ['.', '9', '8', '.', '.', '.', '.', '6', '.']
//,
//    ['8', '.', '.', '.', '6', '.', '.', '.', '3']
//,
//    ['4', '.', '.', '8', '.', '3', '.', '.', '1']
//,
//    ['7', '.', '.', '.', '2', '.', '.', '.', '6']
//,
//    ['.', '6', '.', '.', '.', '.', '2', '8', '.']
//,
//    ['.', '.', '.', '4', '1', '9', '.', '.', '5']
//,
//    ['.', '.', '.', '.', '8', '.', '.', '7', '9']];


//var output1 = solution.IsValidSudoku(board1);
//Console.WriteLine(output1); // false

//char[][] board2 =
//[
//    ['.', '.', '4', '.', '.', '.', '6', '3', '.']
//    ,
//    ['.', '.', '.', '.', '.', '.', '.', '.', '.']
//    ,
//    ['5', '.', '.', '.', '.', '.', '.', '9', '.']
//    ,
//    ['.', '.', '.', '5', '6', '.', '.', '.', '.']
//    ,
//    ['4', '.', '3', '.', '.', '.', '.', '.', '1']
//    ,
//    ['.', '.', '.', '7', '.', '.', '.', '.', '.']
//    ,
//    ['.', '.', '.', '5', '.', '.', '.', '.', '.']
//    ,
//    ['.', '.', '.', '.', '.', '.', '.', '.', '.']
//    ,
//    ['.', '.', '.', '.', '.', '.', '.', '.', '.']];


//var output2 = solution.IsValidSudoku(board2);
//Console.WriteLine(output2); // 1

//char[][] board3 =
//[
//    ['.', '.', '.', '.', '.', '.', '.', '.', '2'],
//    ['.', '.', '.', '.', '.', '.', '6', '.', '.'],
//    ['.', '.', '1', '4', '.', '.', '8', '.', '.'],
//    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
//    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
//    ['.', '.', '.', '.', '3', '.', '.', '.', '.'],
//    ['5', '.', '8', '6', '.', '.', '.', '.', '.'],
//    ['.', '9', '.', '.', '.', '.', '4', '.', '.'],
//    ['.', '.', '.', '.', '5', '.', '.', '.', '.']];

//var output3 = solution.IsValidSudoku(board3);
//Console.WriteLine(output3); // True


char[][] board4 = [
    ['.', '.', '.', '.', '5', '.', '.', '1', '.'],
    ['.', '4', '.', '3', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '3', '.', '.', '1'],
    ['8', '.', '.', '.', '.', '.', '.', '2', '.'],
    ['.', '.', '2', '.', '7', '.', '.', '.', '.'],
    ['.', '1', '5', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '2', '.', '.', '.'],
    ['.', '2', '.', '9', '.', '.', '.', '.', '.'],
    ['.', '.', '4', '.', '.', '.', '.', '.', '.']];

var output4 = solution.IsValidSudoku(board4);
Console.WriteLine(output4); // false


public class Solution
{
    public bool IsValidSudoku(char[][] board)
    {
        int[][] row = new int[10][];
        int[][] col = new int[10][];
        int[][] center = new int[10][];

        for (int i = 0; i < board.Length; i++)
        {
            row[i] = new int[10];

            for (int j = 0; j < board[i].Length; j++)
            {
                var index = (i / 3) * 3 + j / 3;
                //Console.WriteLine($"{index} {board[i][j]}");
                if (col[j] == null)
                    col[j] = new int[10];

                if (center[index] == null)
                    center[index] = new int[10];

                if (int.TryParse(board[i][j].ToString(), out var temp))
                {
                    row[i][temp]++;
                    col[j][temp]++;

                    center[index][temp]++;

                    if (Array.Exists(row[i], v => v > 1) ||
                        Array.Exists(col[j], v => v > 1) ||
                        Array.Exists(center[index], v => v > 1))
                    {
                        return false;
                    }
                }
            }
        }

        return true;
    }
}
